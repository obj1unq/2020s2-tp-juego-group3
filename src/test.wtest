import wollok.game.*
import configuraciones.*
import entrenadores.*
import wollokmones.*
import ataques.*


describe "Test Entrenador se mueve en Pantalla Principal" {
	fixture {
		game.clear()
		game.width(12)
		game.height(12)
		pantallaPrincipal.iniciar()	
	}
	test "Esta en posicion de inicio de partida" {
		assert.equals(jugador.position(), game.center())
	}
	test "Moverse a la derecha no se puede porque esta la casa que es posicion prohibida" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().right(1))
		assert.that(jugador.esPosicionProhibida(game.center().right(1)))
		assert.equals(jugador.position(), game.at(6,6))
	}
	test "Moverse a la izquierda" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().left(1))
		assert.equals(jugador.position(), game.at(5,6))
	}
	test "Moverse hacia arriba" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().up(1))
		assert.equals(jugador.position(), game.at(6,7))
	}
	test "Moverse hacia abajo" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().down(1))
		assert.equals(jugador.position(), game.at(6,5))
	}
	test "Colisiona con el Entrenador rival Fercho" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().down(1))
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().left(2))
		assert.equals(game.uniqueCollider(jugador), fercho)
	}
	test "Colisiona con el Entrenador rival Juan" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().down(4))
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().right(3))
		assert.equals(game.uniqueCollider(jugador), juan)
	}
	test "Colisiona con el Entrenador rival Ivi" {
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().up(4))
		jugador.irASiSeMantieneEnLaPantalla(jugador.position().right(1))
		assert.equals(game.uniqueCollider(jugador), ivi)
	}
}

describe "Test Mana de Wollokmon" {
	fixture {
		game.clear()
		game.width(12)
		game.height(12)
		ivi.iniciarPelea()
	}
	test "Mana no se consume cuando se usa ataque base y esta full" {
		assert.equals(3, jugador.wollokmon().manaActual())
		pantallaDeBatalla.turno(0)
		assert.equals(3, jugador.wollokmon().manaActual())
	}
	test "Mana aumenta cuando se usa ataque base y esta vacio" {
		jugador.wollokmon().manaActual(0)
		assert.equals(0, jugador.wollokmon().manaActual())
		pantallaDeBatalla.turno(0)
		assert.equals(1, jugador.wollokmon().manaActual())
	}
	test "Mana no se consume cuando se usa defensa y esta full" {
		assert.equals(3, jugador.wollokmon().manaActual())
		pantallaDeBatalla.turno(1)
		assert.equals(3, jugador.wollokmon().manaActual())
	}
	test "Mana aumenta cuando se usa defensa y esta vacio" {
		jugador.wollokmon().manaActual(0)
		assert.equals(0, jugador.wollokmon().manaActual())
		pantallaDeBatalla.turno(1)
		assert.equals(1, jugador.wollokmon().manaActual())
	}
	test "Mana se consume cuando se usa ataque especial y esta full" {
		assert.equals(3, jugador.wollokmon().manaActual())
		pantallaDeBatalla.turno(2)
		assert.equals(2, jugador.wollokmon().manaActual())
	}
	test "Mana no alcanza cuando se usa ataque especial y esta vacio" {
		jugador.wollokmon().manaActual(0)
		assert.equals(0, jugador.wollokmon().manaActual())
		assert.throwsExceptionWithMessage("No tengo mana para especial", { pantallaDeBatalla.turno(2) })
	}
}

describe "Test Vida de Wollokmon Rival" {
	fixture {
		game.clear()
		nahue.iniciarPelea() // Wollokmon rival : Silvestre es el de nahue, tiene todos los ataques especiales no curativos (agua, fuego, rayo)
	}
	test "Wollokmon rival pierde vida cuando Wollokmon jugable realiza ataque base" {
		jugador.wollokmon(swirtle)
		assert.equals(100, nahue.wollokmon().vidaActual())
		nahue.wollokmon().recibirDanio(ataqueBase.danioEjercido(jugador.wollokmon(), nahue.wollokmon())) // (10 + ejecutor.ataqueActual()) - rival.defensaActual(); o sea -> 10 + 12 - 12 = 10
		assert.equals(90, nahue.wollokmon().vidaActual())
	}
	test "Wollokmon rival no pierde vida cuando Wollokmon jugable utiliza defensa" {
		jugador.wollokmon(pepita)
		assert.equals(100, nahue.wollokmon().vidaActual())
		nahue.wollokmon().recibirDanio(defensa.danioEjercido(jugador.wollokmon(), nahue.wollokmon()))
		assert.equals(100, nahue.wollokmon().vidaActual())
	}
	test "Wollokmon rival no pierde vida cuando Wollokmon jugable utiliza brisa curativa" {
		jugador.wollokmon(pepita)
		assert.equals(100, nahue.wollokmon().vidaActual())
		nahue.wollokmon().recibirDanio(viento.danioEjercido(jugador.wollokmon(), nahue.wollokmon()))
		assert.equals(100, nahue.wollokmon().vidaActual())
	}
	test "Wollokmon rival pierde vida cuando Wollokmon jugable realiza ataque especial agua" {
		jugador.wollokmon(swirtle)
		assert.equals(nahue.wollokmon().vidaActual(), 100)
		nahue.wollokmon().recibirDanio(agua.danioEjercido(jugador.wollokmon(), nahue.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 10 - 12 = 8
		assert.equals(92, nahue.wollokmon().vidaActual())
	}
	test "Wollokmon rival pierde vida cuando Wollokmon jugable realiza ataque especial fuego" {
		jugador.wollokmon(warmander)
		assert.equals(100, nahue.wollokmon().vidaActual())
		nahue.wollokmon().recibirDanio(fuego.danioEjercido(jugador.wollokmon(), nahue.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 12 - 12 = 10
		assert.equals(90, nahue.wollokmon().vidaActual())
	}
	test "Wollokmon rival pierde vida cuando Wollokmon jugable realiza ataque especial rayo" {
		jugador.wollokmon(pikawu)
		assert.equals(100, nahue.wollokmon().vidaActual())
		nahue.wollokmon().recibirDanio(rayo.danioEjercido(jugador.wollokmon(), nahue.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 12 - 12 = 10
		assert.equals(90, nahue.wollokmon().vidaActual())
	}
}

describe "Test Vida de Wollokmon Aliado" {
	fixture {
		game.clear()
		nahue.iniciarPelea() // Wollokmon rival : Silvestre es el de nahue, tiene todos los ataques especiales no curativos (agua, fuego, rayo)
	}
	test "Wollokmon aliado pierde vida cuando Wollokmon rival realiza ataque base" {
		assert.equals(100, jugador.wollokmon().vidaActual()) // Pepita
		jugador.wollokmon().recibirDanio(ataqueBase.danioEjercido(nahue.wollokmon(), jugador.wollokmon())) // (10 + ejecutor.ataqueActual()) - rival.defensaActual(); o sea -> 10 + 12 - 12 = 10
		assert.equals(90, jugador.wollokmon().vidaActual())
	}
	test "Wollokmon aliado no pierde vida cuando Wollokmon rival utiliza defensa" {
		assert.equals(100, jugador.wollokmon().vidaActual()) // Pepita
		jugador.wollokmon().recibirDanio(defensa.danioEjercido(nahue.wollokmon(), jugador.wollokmon()))
		assert.equals(100, jugador.wollokmon().vidaActual())
	}
	test "Wollokmon aliado pierde vida cuando Wollokmon rival realiza ataque especial agua" {
		jugador.wollokmon(pikawu)
		assert.equals(100, jugador.wollokmon().vidaActual())
		jugador.wollokmon().recibirDanio(agua.danioEjercido(nahue.wollokmon(), jugador.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 12 - 10 = 12
		assert.equals(88, jugador.wollokmon().vidaActual())
	}
	test "Wollokmon aliado pierde vida cuando Wollokmon rival realiza ataque especial fuego" {
		jugador.wollokmon(swirtle)
		assert.equals(jugador.wollokmon().vidaActual(), 100)
		jugador.wollokmon().recibirDanio(fuego.danioEjercido(nahue.wollokmon(), jugador.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 112 - 12 = 10
		assert.equals(90, jugador.wollokmon().vidaActual())
	}
	test "Wollokmon aliado pierde vida cuando Wollokmon rival realiza ataque especial rayo" {
		jugador.wollokmon(warmander)
		assert.equals(100, jugador.wollokmon().vidaActual())
		jugador.wollokmon().recibirDanio(rayo.danioEjercido(nahue.wollokmon(), jugador.wollokmon())) // (10 + ejecutor.especialActual()) - rival.defensaActual(); o sea -> 10 + 12 - 12 = 10
		assert.equals(90, jugador.wollokmon().vidaActual())
	}
}

describe "Test de efectos" {
	
    const wollokmonEnemigo = nahue.wollokmon()
    var wollokmonAliado
	
	fixture {
		game.clear()
		game.width(12)
		game.height(12)	
	}
	
	test "Efecto y turnos de rayo"{
		jugador.wollokmon(pikawu)
		nahue.iniciarPelea()
		
		assert.equals(12, wollokmonEnemigo.defensaActual())  // la defensa actual es igual a la defensa del wollokmon
		pantallaDeBatalla.turno(2)                           // se aplica el efecto
		wollokmonEnemigo.cumplirTurno()
		assert.equals(2, wollokmonEnemigo.efectosRecibidos().first().turnosRestantes())
		assert.equals(6, wollokmonEnemigo.defensaActual())   // la defensa actual disminuye a la mitad
		wollokmonEnemigo.cumplirTurno()
		assert.equals(1, wollokmonEnemigo.efectosRecibidos().first().turnosRestantes())
		assert.equals(6, wollokmonEnemigo.defensaActual())
		wollokmonEnemigo.cumplirTurno()                      // termina el efecto
		assert.throwsException({wollokmonEnemigo.efectosRecibidos().first().turnosRestantes()})   // ya no deber√≠a haber efecto en la lista de efectos recibidos al llegar a 0
	    assert.equals(12, wollokmonEnemigo.defensaActual())  // la defensa actual vuelve a ser equivalente a la defensa fel wollokmon
	}
	
	test "Efecto y turnos de Agua"{
		jugador.wollokmon(swirtle)
		nahue.iniciarPelea()
		
		wollokmonAliado = jugador.wollokmon()
		
		assert.equals(12, wollokmonAliado.defensaActual())  // la defensa base actual es igual a la defensa base del wollokmon
		pantallaDeBatalla.turno(2)                          // se aplica el efecto
		wollokmonAliado.cumplirTurno()
		assert.equals(17, wollokmonAliado.defensaActual())   // la defensa base actual aumenta en 5
		assert.equals(1, wollokmonAliado.efectosRecibidos().first().turnosRestantes())
		wollokmonAliado.cumplirTurno()                     // termina el efecto
		assert.throwsException({wollokmonAliado.efectosRecibidos().first().turnosRestantes()})	
		assert.equals(12, wollokmonAliado.defensaActual())  // la defensa base actual vuelve a ser equivalente a la defensa base del wollokmon
	}
	
    test "Efecto y turnos de fuego"{
    	jugador.wollokmon(warmander)
		nahue.iniciarPelea()
		
		assert.equals(100, wollokmonEnemigo.vidaActual())
		pantallaDeBatalla.turno(2)
		wollokmonEnemigo.cumplirTurno()
		assert.equals(95, wollokmonEnemigo.vidaActual())  // 100 - 5 (da√±o de efecto fuego) = 95
        assert.equals(2, wollokmonEnemigo.efectosRecibidos().first().turnosRestantes())
    }
    
    test "Efecto brisa curativa"{
    	// con la brisa curativa no hay turnos, se cumple solamente al momento de ejecutarse.
    	
    	jugador.wollokmon(pepita)
		nahue.iniciarPelea()
		
		jugador.wollokmon().recibirDanio(ataqueBase.danioEjercido(wollokmonEnemigo, jugador.wollokmon()))
		assert.equals(90, jugador.wollokmon().vidaActual())
		pantallaDeBatalla.turno(2)
		assert.equals(100, jugador.wollokmon().vidaActual())
	}
        
}

